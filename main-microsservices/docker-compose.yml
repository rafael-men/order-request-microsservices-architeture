version: '3.8'

networks:
  app_network:
    driver: bridge

services:

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    container_name: keycloak
    environment:
      KC_HTTP_PORT: 8080
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KC_PROXY: edge
    ports:
      - "8180:8080"
    networks:
      - app_network
    command: start-dev
    restart: unless-stopped

  product-db:
    image: postgres:13
    container_name: product-db
    environment:
      POSTGRES_DB: product
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: senha
    volumes:
      - product_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped

  product-service:
    build:
      context: ./product-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: product-service
    ports:
      - "8081:8080"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://product-db:5432/product
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: senha
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
    depends_on:
      - product-db
    networks:
      - app_network
    restart: unless-stopped

  customer-db:
    image: postgres:13
    container_name: customer-db
    environment:
      POSTGRES_DB: customer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: senha
    volumes:
      - customer_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped

  customer-service:
    build:
      context: ./customer-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: customer-service
    ports:
      - "8082:8080"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://customer-db:5432/customer
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: senha
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
    depends_on:
      - customer-db
    networks:
      - app_network
    restart: unless-stopped

  order-db:
    image: postgres:13
    container_name: order-db
    environment:
      POSTGRES_DB: order
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: senha
    volumes:
      - order_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped

  order-service:
    build:
      context: ./order-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: order-service
    ports:
      - "8080:8080"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://order-db:5432/order
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: senha
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
      org.rafael.client.CustomerClient/mp-rest/url: http://customer-service:8080
      org.rafael.client.ProductClient/mp-rest/url: http://product-service:8080
    depends_on:
      - order-db
      - customer-service
      - product-service
    networks:
      - app_network
    restart: unless-stopped

volumes:
  product_data:
  customer_data:
  order_data: